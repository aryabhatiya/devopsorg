#+TITLE: Emacs Starter Kit (http://github.com/chowdhuryashraf/literate-devops)
* Org
** Code blocks
*** Load Language
   :PROPERTIES:
   :CUSTOM_ID: babel
   :END:
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.
#+begin_src emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (lisp . t)
         (sh . t)
         (js .t )
         (haskell . t)
         (python . t)))
#+end_src
*** default executable
   :PROPERTIES:
   :CUSTOM_ID: babel_eval_yes
   :END:

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

#+RESULTS:
: t

** Load Babel Libraries
   :PROPERTIES:
   :CUSTOM_ID: code-block-org-devops
   :END:

#+BEGIN_SRC emacs-lisp
  (org-babel-lob-ingest (expand-file-name "~/org/devops.org"))
  (defun devops()
      (interactive)
      (org-babel-lob-ingest (expand-file-name "~/org/devops.org")))
#+END_SRC

#+RESULTS:
: 19

** Wrap Commands
   :PROPERTIES:
   :CUSTOM_ID: babel-wrap
   :END:
#+BEGIN_SRC emacs-lisp
  (defun devops-wrapper ()
    (interactive)
    (let* ((txt (buffer-substring (mark) (point)))
           (trimedtxt  (replace-regexp-in-string (rx (* (any " \t\n")) eos)
                                                     ""
                                                     txt))
           (name (read-from-minibuffer "Program: "))
           (lines (split-string name " "))
           (sproc (split-string (car lines) "-"))
           (proc-name (car sproc))
           (is-src (if (eq (length sproc) 2)  (substring (car (last sproc)) 0 1) "" ))
           (is-lang (if (eq (length sproc) 2)  (substring (car (last sproc)) 1 2) "" ))
           (is-aync (if (eq (length sproc) 2)  (substring (car (last sproc)) 2 3) "" ))
           (src (if (string-equal is-src "s") "SRC" "EXAMPLE" ))
           (lang (cond ((string-equal is-lang "e") "emacs-lisp")
                       ((string-equal is-lang "j" ) "js")
                       ((string-equal is-lang "p") "python")
                       ((string-equal is-lang "s") "sh")
                       (t "")))
           (aync (if (string-equal is-aync "n")
                     ""
                   (concat
                    "\n" "#+call: cmdaync(" proc-name ")"
                    )))
           (proc (cdr lines) ))
      (kill-region (mark) (point))
      (insert (concat
               "#+NAME: " proc-name  "\n"
               "#+BEGIN_" src " " lang  (mapconcat  #'(lambda (s) s )  proc " ") "\n"
               trimedtxt "\n"
               "#+END_" src
               aync
               ))))
#+END_SRC

#+RESULTS:
: devops-wrapper
** Org-Mode Hook -- Keybindings
   :PROPERTIES:
   :CUSTOM_ID: keybindings
   :END:
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
                (local-set-key "\M-\C-n" 'outline-next-visible-heading)
                (local-set-key "\M-\C-p" 'outline-previous-visible-heading)
                (local-set-key "\M-\C-u" 'outline-up-heading)
                ;; table
                (local-set-key "\M-\C-w" 'org-table-copy-region)
                (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
                (local-set-key "\M-\C-l" 'org-table-sort-lines)
                (local-set-key (kbd "<f9>") 'devops-wrapper)
                ;; display images
                (local-set-key "\M-I" 'org-toggle-iimage-in-org)))
#+end_src

** Speed keys
   :PROPERTIES:
   :CUSTOM_ID: speed-keys
   :END:
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the `=org-speed-commands-default=' variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
#+end_src

** Org Capture
   :PROPERTIES:
   :CUSTOM_ID: code-block-org-capture
   :END:
Capture lets you quickly store notes with little interruption of your
work flow.

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

#+RESULTS:
: org-capture

** Clocking work time
   :PROPERTIES:
   :CUSTOM_ID: code-block-org-clock
   :END:
Org mode allows you to clock the time you spend on specific tasks in a project. When you start working on an item, you can start the clock. When you stop working on that task, or when you mark the task done, the clock is stopped and the corresponding time interval is recorded. It also computes the total time spent on each subtree1 of a project. And it remembers a history or tasks recently clocked, so that you can jump quickly between a number of tasks absorbing your time.

To save the clock history across Emacs sessions, use

#+BEGIN_SRC emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+END_SRC

#+RESULTS:
: org-capture

** Org Agenda files
   :PROPERTIES:
   :CUSTOM_ID: code-block-org-agenda
   :END:
Capture lets you quickly store notes with little interruption of your
work flow.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/org" ))
#+END_SRC

#+RESULTS:
| ~/org | ~/literate-emacs/ |
** Closing items
   :PROPERTIES:
   :CUSTOM_ID: code-block-org-closing-items
   :END:
Capture lets you quickly store notes with little interruption of your
work flow.

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
(setq org-log-done 'note)
#+END_SRC

#+RESULTS:
: time

** The Library of Babel
   :PROPERTIES:
   :CUSTOM_ID: library-of-babel
   :END:
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the `org-babel-lob-ingest' function.

* Installation
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:
** Install Emacs version 24 or greater
*** Build [[~/org/pipeserver.org][ PipeServer ]]
*** Installation In Linux
**** Arch Linux
#+BEGIN_SRC sh
 pacman -S sudo
#+END_SRC

**** Debain / Ubuntu
****** [[http://ubuntuhandbook.org/index.php/2014/10/emacs-24-4-released-install-in-ubuntu-14-04/][emacs 24.4 install ubuntu]]
****** Build prerecusites
#+NAME: emacsdep
#+BEGIN_EXAMPLE
sudo apt-get install build-essential texinfo libx11-dev libxpm-dev libjpeg-dev libpng-dev libgif-dev libtiff-dev libgtk2.0-dev libncurses-dev
#+END_EXAMPLE

#+call: cmdaync(emacsdep)

#+RESULTS: cmdaync(emacsdep)
: command  is sended to /tmp/org

****** Download 24.5 prepare installations
#+NAME: em25
#+BEGIN_EXAMPLE
cd .. ;
wget http://ftp.gnu.org/gnu/emacs/emacs-24.5.tar.xz  ;
xz -d emacs-24.5.tar.xz ;
tar -xvf emacs-24.5.tar ;
#+END_EXAMPLE

#+call: cmdaync(em25)

#+NAME: em25conf
#+BEGIN_EXAMPLE
cd emacs-24.5  ;
./configure
#+END_EXAMPLE

#+call: cmdaync(em25conf)

#+NAME: em25install
#+BEGIN_EXAMPLE
make ; sudo make install
#+END_EXAMPLE

#+call: cmdaync(em25install)

#+RESULTS: cmdaync(em25install)
: command  is sended to /tmp/org
#+NAME: embin
#+BEGIN_SRC sh :dir /sudo:root@localhost:/usr/local/bin
mv /usr/local/bin/emacs /usr/local/bin/emacs.old
ln -s `which emacs-24.5` /usr/local/bin/emacs
#+END_SRC

#+RESULTS: embin

****** aspell
#+NAME: aspellinstall
#+BEGIN_EXAMPLE
sudo apt-get install aspell
#+END_EXAMPLE

#+call: cmdaync(aspellinstall)

#+RESULTS: cmdaync(aspellinstall)
: command  is sended to /tmp/org

#+call: cmdaync("cd ../org ; pwd ")

#+RESULTS: cmdaync("cd ../org ; pwd ")
: command  is sended to /tmp/org

*** Installation in Max OSX
#+BEGIN_EXAMPLE
brew install emacs
#+END_EXAMPLE
** Emacs Configaration
*** Make emacs Script
#+NAME: initemacs
#+begin_src sh :noweb yes
  emacs -q -l <<pwd()>>/init.el --eval "(run-hooks 'after-init-hook)" $1
#+end_src

#+call: wrap("initemacs") :results raw

#+NAME: initemacs_tofile
#+BEGIN_SRC python :session :noweb yes :var filename="em.sh"
code =  """<<initemacs>>"""
open(filename, 'w').write(code)
#+END_SRC

#+RESULTS: initemacs_tofile
: None


#+call: fread("em.sh")

#+RESULTS: fread("em.sh")
: emacs -q -l /home/frp/org/init.el --eval "(run-hooks 'after-init-hook)" $1

*** Minimal Emacs Configuretion
**** On User or Desktop Environment
#+BEGIN_SRC sh :var path=pwd()   :dir /sudo:root@localhost:/usr/local/bin
  ls -la $path/em.sh
  cp $path/em.sh  em
  chmod 755 em
#+END_SRC

#+RESULTS:
: -rw-rw-r-- 1 frp frp 74 Feb 28 13:27 /home/frp/org/em.sh

**** On Superuser / Server Environment
#+BEGIN_SRC sh :var path=pwd()
ls -la $path/em.sh
cp $path/em.sh  /bin/em
chmod 755 /bin/em
ls -la /bin/em
#+END_SRC

#+RESULTS:
| -rwxr-xr-x | 1 | root | root | 158 | Jan | 22 | 18:06 | /usr/local/src/literate-devops/em.sh |
| -rwxr-xr-x | 1 | root | root | 158 | Jan | 22 | 18:06 | /bin/em                                         |

*** Close emacs , Restart emacs using "em" command
*** Configure Prelude
**** clone  backup previous
***** Backup
#+BEGIN_SRC sh :dir ~
mv .emacs.d backup
#+END_SRC

#+RESULTS:
***** Clone
#+NAME: prelude_git
#+BEGIN_SRC sh :dir ~
cd ; git clone git://github.com/bbatsov/prelude.git .emacs.d
#+END_SRC

***** Run Aync
#+NAME: prelude_git_aync
#+BEGIN_SRC python :session :noweb yes :post cmdaync(*this*)
"""<<prelude_git>>"""
#+END_SRC

#+RESULTS: prelude_git_aync
: command  is sended to /tmp/org
**** copy prelude to .emacs.d
#+BEGIN_SRC sh
ls ~/.emacs.d
#+END_SRC

#+RESULTS:
| auto-save-list  |
| CONTRIBUTING.md |
| core            |
| init.el         |
| modules         |
| personal        |
| README.md       |
| sample          |
| themes          |
| utils           |
| vendor          |


#+BEGIN_SRC sh
ls ~/.emacs.d/.git
#+END_SRC

#+RESULTS:
| branches    |
| config      |
| description |
| HEAD        |
| hooks       |
| index       |
| info        |
| logs        |
| objects     |
| packed-refs |
| refs        |

**** configaration
***** Add Important Modules
#+NAME: prelude-modules
#+BEGIN_SRC emacs-lisp
;;; Uncomment the modules you'd like to use and restart Prelude afterwards

;; Emacs IRC client
(require 'prelude-erc)
(require 'prelude-ido) ;; Super charges Emacs completion for C-x C-f and more
(require 'prelude-helm) ;; Interface for narrowing and search
(require 'prelude-helm-everywhere) ;; Enable Helm everywhere
(require 'prelude-company)
(require 'prelude-key-chord) ;; Binds useful features to key combinations
;; (require 'prelude-mediawiki)
;; (require 'prelude-evil)

;;; Programming languages support
(require 'prelude-c)
(require 'prelude-clojure)
(require 'prelude-coffee)
(require 'prelude-common-lisp)
(require 'prelude-css)
(require 'prelude-emacs-lisp)
(require 'prelude-erlang)
(require 'prelude-elixir)
(require 'prelude-go)
(require 'prelude-haskell)
(require 'prelude-js)
(require 'prelude-latex)
(require 'prelude-lisp)
(require 'prelude-ocaml)
(require 'prelude-org) ;; Org-mode helps you keep TODO lists, notes and more
(require 'prelude-perl)
(require 'prelude-python)
(require 'prelude-ruby)
(require 'prelude-scala)
(require 'prelude-scheme)
(require 'prelude-shell)
(require 'prelude-scss)
(require 'prelude-web) ;; Emacs mode for web templates
(require 'prelude-xml)
(require 'prelude-yaml)
#+END_SRC

#+NAME: prelude-modules_fwrite
#+BEGIN_SRC python :session :noweb yes :post fwrite("~/.emacs.d/prelude-modules.el",*this*)
"""
<<prelude-modules>>
"""
#+END_SRC

#+RESULTS: prelude-modules_fwrite
: nil

#+call: fread("~/.emacs.d/prelude-modules.el")

***** Add devops and orgmode

#+NAME: customprelude
#+BEGIN_SRC emacs-lisp
;;; hello
(org-babel-load-file (expand-file-name "~/org/starter-kit.org" ))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(js2-basic-offset 2))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC

#+NAME: customprelude_fwrite
#+BEGIN_SRC python :session :noweb yes :post fwrite("~/.emacs.d/personal/custom.el",*this*)
"""
<<customprelude>>
"""
#+END_SRC

#+RESULTS: customprelude_fwrite
: nil

#+call: fread("~/.emacs.d/personal/custom.el")

***** Emacs Setup For Debain

#+NAME: ealias
#+begin_example
alias emd='emacs --daemon'
alias e='emacsclient -t'
alias ec='emacsclient -c'
alias vim='emacsclient -t'
alias vi='emacsclient -t'
export TERM=xterm-256color
#+end_example

#+call: addcodetofile(ealias,"~/.bashrc")

***** Emacs Setup For Arch Linux

#+NAME: ealias-arch
#+begin_example
alias emd='emacs --daemon'
alias e='emacsclient -t'
alias ec='emacsclient -c'
alias vim='emacsclient -t'
alias vi='emacsclient -t'
#set -x TERM xterm-256color
#+end_example

#+call: fwrite("~/.config/fish/config.fish", ealias-arch)

#+call: fread("~/.config/fish/config.fish")

***** Emacs Setup For MAC OSX

#+NAME: ealias-mac-osx
#+begin_example
alias emd='emacs --daemon'
alias e='emacsclient -t'
alias ec='emacsclient -c'
alias vim='emacsclient -t'
alias vi='emacsclient -t'
#+end_example

#+call: fwrite("~/.bashrc", ealias-mac-osx)

#+RESULTS:
: nil

#+call: fread("~/.bashrc")

#+RESULTS:
: alias emd='emacs --daemon'
: alias e='emacsclient -t'
: alias ec='emacsclient -c'
: alias vim='emacsclient -t'
: alias vi='emacsclient -t'

**** Run Prelude for the First time


#+NAME: emacs
#+BEGIN_SRC sh
emacs
#+END_SRC

#+NAME: emacs_aync
#+BEGIN_SRC python :session :noweb yes :post cmdaync(*this*)
"""<<emacs>>"""
#+END_SRC

#+RESULTS: emacs_aync
: command  is sended to /tmp/org
**** Changes the modification to github
#+NAME: gitconfig
#+BEGIN_SRC sh
  git config --global user.email "chowdhury.k.ashraf@gmail.com"  ;
  git config --global user.name "Chowdhury Ashraf"
#+END_SRC

#+RESULTS: gitconfig
** git update
#+NAME: gitupdate
#+BEGIN_EXAMPLE
sudo apt-get install python-software-properties ;
sudo add-apt-repository ppa:git-core/ppa ;
sudo apt-get update ;
sudo apt-get install git
#+END_EXAMPLE

#+call: cmdaync(gitupdate)

#+RESULTS:
: command  is sended to /tmp/org

#+BEGIN_SRC sh
git --version
#+END_SRC

#+RESULTS:
: git version 2.7.2
** Install node Using NVM
*** Introduction
An alternative to installing Node.js through apt is to use a specially designed tool called nvm, which stands
for "Node.js version manager".

Using nvm, you can install multiple, self-contained versions of Node.js which will allow you to control your
environment easier. It will give you on-demand access to the newest versions of Node.js, but will also allow
you to target previous releases that your app may depend on.

To start off, we'll need to get the software packages from our Ubuntu repositories that will allow us to
build source packages. The nvm script will leverage these tools to build the necessary components:

*** Dev Depandency

#+NAME: devdepnvm
#+BEGIN_EXAMPLE
sudo apt-get update
sudo apt-get install build-essential libssl-dev
#+END_EXAMPLE


Once the prerequisite packages are installed, you can pull down the nvm installation script from the
project's GitHub page. The version number may be different, but in general, you can download and install it
with the following syntax:

*** Download Depandency

#+NAME: download-nvm
#+BEGIN_EXAMPLE
curl https://raw.githubusercontent.com/creationix/nvm/v0.16.1/install.sh | sh
#+END_EXAMPLE


This will download the script and run it. It will install the software into a subdirectory of your home
directory at ~/.nvm. It will also add the necessary lines to your ~/.profile file to use the file.

To gain access to the nvm functionality, you'll need to log out and log back in again, or you can source the ~
/.profile file so that your current session knows about the changes:

#+NAME: sp
#+BEGIN_EXAMPLE
source ~/.profile
#+END_EXAMPLE


Now that you have nvm installed, you can install isolated Node.js versions.

To find out the versions of Node.js that are available for installation, you can type:

#+NAME: nvm-remote
#+BEGIN_SRC
nvm ls-remote
#+END_SRC

-------------------------------------------------------------------------------------------------------------
. . .
 v0.11.6
 v0.11.7
 v0.11.8
 v0.11.9
v0.11.10
v0.11.11
v0.11.12
v0.11.13

As you can see, the newest version at the time of this writing is v0.11.13. You can install that by typing:

#+NAME: nvm-install
#+BEGIN_EXAMPLE
nvm install 0.11.13
#+END_EXAMPLE


Usually, nvm will switch to use the most recently installed version. You can explicitly tell nvm to use the
version we just downloaded by typing:

nvm use 0.11.13

When you install Node.js using nvm, the executable is called node. You can see the version currently being
used by the shell by typing:

node -v
-------------------------------------------------------------------------------------------------------------
v.0.11.13

If you have multiple Node.js versions, you can see what is installed by typing:

nvm ls

If you wish to default one of the versions, you can type:

nvm alias default 0.11.13

This version will be automatically selected when a new session spawns. You can also reference it by the alias
like this:

nvm use default

Each version of Node.js will keep track of its own packages and has npm available to manage these.

You can have npm install packages to the Node.js project's ./node_modules directory by using the normal
format:


npm install express

If you'd like to install it globally (available to the other projects using the same Node.js version), you
can add the -g flag:


npm install -g express

This will install the package in:


~/.nvm/node_version/lib/node_modules/package_name

Installing globally will let you run the commands from the command line, but you'll have to use link the
package into your local sphere to require it from within a program:


npm link express

You can learn more about the options available to you with nvm by typing:

nvm help
