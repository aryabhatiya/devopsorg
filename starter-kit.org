#+TITLE: Emacs Starter Kit (http://github.com/chowdhuryashraf/literate-devops)
* Installation
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:
** Emacs Configaration
*** Configure Prelude
**** Clone
#+NAME: prelude_git
#+BEGIN_SRC sh :dir ~
cd ; git clone git://github.com/bbatsov/prelude.git .emacs.d
#+END_SRC

**** configaration
***** Add Important Modules
#+NAME: prelude-modules
#+BEGIN_EXAMPLE
;;; Uncomment the modules you'd like to use and restart Prelude afterwards

;; Emacs IRC client
(require 'prelude-erc)
(require 'prelude-ido) ;; Super charges Emacs completion for C-x C-f and more
(require 'prelude-helm) ;; Interface for narrowing and search
(require 'prelude-helm-everywhere) ;; Enable Helm everywhere
(require 'prelude-company)
(require 'prelude-key-chord) ;; Binds useful features to key combinations
;; (require 'prelude-mediawiki)
;; (require 'prelude-evil)

;;; Programming languages support
(require 'prelude-c)
(require 'prelude-clojure)
(require 'prelude-coffee)
(require 'prelude-common-lisp)
(require 'prelude-css)
(require 'prelude-emacs-lisp)
(require 'prelude-erlang)
(require 'prelude-elixir)
(require 'prelude-go)
(require 'prelude-haskell)
(require 'prelude-js)
(require 'prelude-latex)
(require 'prelude-lisp)
(require 'prelude-ocaml)
(require 'prelude-org) ;; Org-mode helps you keep TODO lists, notes and more
(require 'prelude-perl)
(require 'prelude-python)
(require 'prelude-ruby)
(require 'prelude-scala)
(require 'prelude-scheme)
(require 'prelude-shell)
(require 'prelude-scss)
(require 'prelude-web) ;; Emacs mode for web templates
(require 'prelude-xml)
(require 'prelude-yaml)
#+END_EXAMPLE

#+call: fwrite("~/.emacs.d/prelude-modules.el",prelude-modules)
****** testing
#+call: fread("~/.emacs.d/prelude-modules.el")

***** Add devops and orgmode

#+NAME: customprelude
#+BEGIN_EXAMPLE
;;; hello
(org-babel-load-file (expand-file-name "~/org/starter-kit.org" ))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(js2-basic-offset 2))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_EXAMPLE


**** Changes the modification to github
#+NAME: gitconfig
#+BEGIN_SRC sh
  git config --global user.email "chowdhury.k.ashraf@gmail.com"  ;
  git config --global user.name "Chowdhury Ashraf"
#+END_SRC

#+RESULTS: gitconfig

** Install node Using NVM
*** Introduction
An alternative to installing Node.js through apt is to use a specially designed tool called nvm, which stands
for "Node.js version manager".

Using nvm, you can install multiple, self-contained versions of Node.js which will allow you to control your
environment easier. It will give you on-demand access to the newest versions of Node.js, but will also allow
you to target previous releases that your app may depend on.

To start off, we'll need to get the software packages from our Ubuntu repositories that will allow us to
build source packages. The nvm script will leverage these tools to build the necessary components:

*** Dev Depandency

#+NAME: devdepnvm
#+BEGIN_EXAMPLE
sudo apt-get update
sudo apt-get install build-essential libssl-dev
#+END_EXAMPLE


Once the prerequisite packages are installed, you can pull down the nvm installation script from the
project's GitHub page. The version number may be different, but in general, you can download and install it
with the following syntax:

*** Download Depandency

#+NAME: download-nvm
#+BEGIN_EXAMPLE
curl https://raw.githubusercontent.com/creationix/nvm/v0.16.1/install.sh | sh
#+END_EXAMPLE


This will download the script and run it. It will install the software into a subdirectory of your home
directory at ~/.nvm. It will also add the necessary lines to your ~/.profile file to use the file.

To gain access to the nvm functionality, you'll need to log out and log back in again, or you can source the ~
/.profile file so that your current session knows about the changes:

#+NAME: sp
#+BEGIN_EXAMPLE
source ~/.profile
#+END_EXAMPLE


Now that you have nvm installed, you can install isolated Node.js versions.

To find out the versions of Node.js that are available for installation, you can type:

#+NAME: nvm-remote
#+BEGIN_SRC
nvm ls-remote
#+END_SRC

-------------------------------------------------------------------------------------------------------------
. . .
 v0.11.6
 v0.11.7
 v0.11.8
 v0.11.9
v0.11.10
v0.11.11
v0.11.12
v0.11.13

As you can see, the newest version at the time of this writing is v0.11.13. You can install that by typing:

#+NAME: nvm-install
#+BEGIN_EXAMPLE
nvm install 0.11.13
#+END_EXAMPLE


Usually, nvm will switch to use the most recently installed version. You can explicitly tell nvm to use the
version we just downloaded by typing:

nvm use 0.11.13

When you install Node.js using nvm, the executable is called node. You can see the version currently being
used by the shell by typing:

node -v
-------------------------------------------------------------------------------------------------------------
v.0.11.13

If you have multiple Node.js versions, you can see what is installed by typing:

nvm ls

If you wish to default one of the versions, you can type:

nvm alias default 0.11.13

This version will be automatically selected when a new session spawns. You can also reference it by the alias
like this:

nvm use default

Each version of Node.js will keep track of its own packages and has npm available to manage these.

You can have npm install packages to the Node.js project's ./node_modules directory by using the normal
format:


npm install express

If you'd like to install it globally (available to the other projects using the same Node.js version), you
can add the -g flag:


npm install -g express

This will install the package in:


~/.nvm/node_version/lib/node_modules/package_name

Installing globally will let you run the commands from the command line, but you'll have to use link the
package into your local sphere to require it from within a program:


npm link express

You can learn more about the options available to you with nvm by typing:

nvm help
** Install Clojure Script
*** Oracle JDK 7

This is a developer preview, the general release is scheduled for March 2014. This external article about Java 8 may help you to understand what it's all about.

#+NAME: oraclejvm
#+BEGIN_EXAMPLE
sudo add-apt-repository ppa:webupd8team/java ;
sudo apt-get update ;
sudo apt-get install oracle-jdk7-installer
#+END_EXAMPLE

#+call: cmdaync(oraclejvm)

#+RESULTS:
: command  is sended to /tmp/org

**** Test Java Verstion
#+NAME: javaver
#+BEGIN_EXAMPLE
java -version
#+END_EXAMPLE
#+call: cmdaync(javaver)

#+RESULTS:
: command  is sended to /tmp/org

*** Download the lein script
#+NAME: lein
#+BEGIN_EXAMPLE
wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
#+END_EXAMPLE
#+call: cmdaync(lein)

#+RESULTS:
: command  is sended to /tmp/org

#+BEGIN_SRC sh
ls -l lein
#+END_SRC

#+RESULTS:
: -rw-rw-r-- 1 frp frp 12871 মার্চ   9 00:03 lein

*** Place it on your $PATH where your shell can find it (eg. ~/bin)
Set it to be executable (chmod a+x ~/bin/lein)
#+BEGIN_SRC sh
chmod +x lein
#+END_SRC

#+NAME: leinmv
#+BEGIN_EXAMPLE
sudo mv lein /usr/local/bin/
#+END_EXAMPLE
#+call: cmdaync(leinmv)

#+RESULTS:
: command  is sended to /tmp/org

*** Run it (lein) and it will download the self-install package
#+NAME: leininstall
#+BEGIN_EXAMPLE
chmod +x /usr/local/bin/lein ;
lein
#+END_EXAMPLE
#+call: cmdaync(leininstall)

#+RESULTS:
: command  is sended to /tmp/org
