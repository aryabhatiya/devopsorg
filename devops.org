* Org
** Code blocks
*** Load Language
   :PROPERTIES:
   :CUSTOM_ID: babel
   :END:
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.
#+begin_src emacs-lisp
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (lisp . t)
           (sh . t)
           (js .t )
           (haskell . t)
           (python . t)
           (clojure . t)))
#+end_src

#+RESULTS:

*** default executable
   :PROPERTIES:
   :CUSTOM_ID: babel_eval_yes
   :END:

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

#+RESULTS:

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

#+RESULTS:
: t

** Load Babel Libraries
   :PROPERTIES:
   :CUSTOM_ID: code-block-org-devops
   :END:

#+BEGIN_SRC emacs-lisp
  (org-babel-lob-ingest (expand-file-name "~/org/devops.org"))
  (defun devops()
      (interactive)
      (org-babel-lob-ingest (expand-file-name "~/org/devops.org")))
#+END_SRC

#+RESULTS:
: devops

** Wrap Commands
   :PROPERTIES:
   :CUSTOM_ID: babel-wrap
   :END:
#+BEGIN_SRC emacs-lisp
  (defun devops-wrapper ()
    (interactive)
    (let* ((txt (buffer-substring (mark) (point)))
           (trimedtxt  (replace-regexp-in-string (rx (* (any " \t\n")) eos)
                                                     ""
                                                     txt))
           (name (read-from-minibuffer "Program: "))
           (lines (split-string name " "))
           (sproc (split-string (car lines) "-"))
           (proc-name (car sproc))
           (is-src (if (eq (length sproc) 2)  (substring (car (last sproc)) 0 1) "" ))
           (is-lang (if (eq (length sproc) 2)  (substring (car (last sproc)) 1 2) "" ))
           (is-aync (if (eq (length sproc) 2)  (substring (car (last sproc)) 2 3) "" ))
           (src (if (string-equal is-src "s") "SRC" "EXAMPLE" ))
           (lang (cond ((string-equal is-lang "e") "emacs-lisp")
                       ((string-equal is-lang "j" ) "js")
                       ((string-equal is-lang "p") "python")
                       ((string-equal is-lang "s") "sh")
                       (t "")))
           (aync (if (string-equal is-aync "n")
                     ""
                   (concat
                    "\n" "#+call: cmdaync(" proc-name ")"
                    )))
           (proc (cdr lines) ))
      (kill-region (mark) (point))
      (insert (concat
               "#+NAME: " proc-name  "\n"
               "#+BEGIN_" src " " lang  (mapconcat  #'(lambda (s) s )  proc " ") "\n"
               trimedtxt "\n"
               "#+END_" src
               aync
               ))))
#+END_SRC
** Org Capture
   :PROPERTIES:
   :CUSTOM_ID: code-block-org-capture
   :END:
Capture lets you quickly store notes with little interruption of your
work flow.

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

#+RESULTS:
: org-capture

** Clocking work time
   :PROPERTIES:
   :CUSTOM_ID: code-block-org-clock
   :END:
Org mode allows you to clock the time you spend on specific tasks in a project. When you start working on an item, you can start the clock. When you stop working on that task, or when you mark the task done, the clock is stopped and the corresponding time interval is recorded. It also computes the total time spent on each subtree1 of a project. And it remembers a history or tasks recently clocked, so that you can jump quickly between a number of tasks absorbing your time.

To save the clock history across Emacs sessions, use

#+BEGIN_SRC emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+END_SRC

#+RESULTS:
| org-clock-save | org-babel-remove-temporary-directory |

** Closing items
   :PROPERTIES:
   :CUSTOM_ID: code-block-org-closing-items
   :END:
Capture lets you quickly store notes with little interruption of your
work flow.

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
(setq org-log-done 'note)
#+END_SRC

#+RESULTS:
: note

** Disable menubar , toolbar scrollbar
   :PROPERTIES:
   :CUSTOM_ID: disable-toolbar
   :END:
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1 )
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC

#+RESULTS:

* File directory handleing
** pwd
#+NAME: pwd
#+BEGIN_SRC elisp :var file=""
(expand-file-name file)
#+END_SRC

#+RESULTS: pwd
: /home/frp/org

** module
#+NAME: module
#+BEGIN_SRC elisp  :var filename = ""
  (last
   (split-string
    (replace-regexp-in-string "/" " "   (expand-file-name filename)) ))
#+END_SRC

#+RESULTS: module
| org |

** Keyboard Macro for diff
#+BEGIN_EXAMPLE
;; Original keys: e D NUL ESC > ESC w C-x C-o C-x o C-x o C-x C-o C-x o q y

Command: last-kbd-macro
Key: none

Macro:

e			;; self-insert-command
D			;; self-insert-command
NUL			;; set-mark-command
ESC >			;; end-of-buffer
ESC w			;; kill-ring-save
C-x C-o			;; delete-blank-lines
C-x o			;; other-window
C-x o			;; other-window
C-x C-o			;; delete-blank-lines
C-x o			;; other-window
q			;; self-insert-command
y			;; self-insert-command

#+END_EXAMPLE
#+BEGIN_SRC elisp
(fset 'ashdiff
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("eD>woooqy" 0 "%d")) arg)))
#+END_SRC
** Send data to PIPE
   CLOCK: [2016-01-13 Wed 05:47]--[2016-01-13 Wed 05:58] =>  0:11
   :PROPERTIES:
   :Effort:   0:10
   :END:
#+NAME: cmdaync
#+BEGIN_SRC sh :var cmd="" :var mod=module[0] :noweb yes
  <<check_pipeserver_running>>
  echo  $cmd   > $pipe
#+END_SRC

#+RESULTS:
: command npm adduser is sended to /tmp/friends-aneesha

*** check_pipeserver_running
#+NAME: check_pipeserver_running
#+BEGIN_SRC sh
  pipe="/tmp/"$mod
  [ ! -p $pipe ] && exit 1 || echo "command $DT is sended to $pipe"
#+END_SRC

#+RESULTS: check_pipeserver_running
: command  is sended to /tmp/friends-aneesha

* file contents
** Write string
#+NAME: fwrite
#+BEGIN_SRC elisp :var filename=""  :var s=""
    (with-temp-buffer
      (insert s)
      (when (file-writable-p filename)
         (write-region (point-min) (point-max) filename nil))))
#+END_SRC
** Output file to string
#+name: fread
#+BEGIN_SRC elisp :var filename=""
    (with-temp-buffer
      (insert-file-contents filename)
      (buffer-string))
#+END_SRC

#+RESULTS:
: # friends-aneesha

** bash quote
#+NAME: beginsh
#+BEGIN_SRC sh  :noweb yes :results verbatim
echo $(cat << 'BBL_START'
#+END_SRC

#+NAME: endsh
#+BEGIN_SRC sh
BBL_START
)
#+END_SRC

** temp buffer
#+name: tmpbuf
#+BEGIN_SRC elisp :var buf="" :var name="*tmp*"
(progn
(switch-to-buffer-other-window name)
(erase-buffer)
(insert buf)
(other-window 1))
#+END_SRC

#+RESULTS: tmpbuf

** file search replace
#+NAME: filesearchreplace
#+BEGIN_SRC elisp :var filename="" :var sstr="" :var rstr=""
  (with-temp-buffer
    (insert-file-contents filename)
    (goto-char (point-min))
    (while (search-forward sstr nil t)
      (replace-match rstr))
    (when (file-writable-p filename)
      (write-region (point-min) (point-max) filename nil))
      (buffer-string))
#+END_SRC
** Add code to File
#+NAME: addcodetofile
#+BEGIN_SRC elisp :var buffer=""  :var filename=""
  (with-temp-buffer
    (when (file-writable-p filename)
      (insert-file-contents filename)
      )
    (insert "\n")
    (insert buffer)
    (insert "\n")
    (when (file-writable-p filename)
      (write-region (point-min) (point-max) filename nil))
  (buffer-string))
#+END_SRC

#+call: addcodetofile("z\n","/tmp/hello.test")

#+RESULTS:
: z
: zAAzzzzdfdfabdcbdcabc

* Setup.org
** Pandoc org to markdown_github
#+NAME: readme
#+BEGIN_SRC sh :var src="setup.org" :var dst="README.md" :noweb yes :post fwrite(bagesbuf())
/root/.cabal/bin/pandoc --from org --to markdown_github -o $dst $src
#+END_SRC
** run git macro
#+BEGIN_SRC elisp
(fset 'npmcommit
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("eDhwoooqyo<s		<e	OAOAOAo" 0 "%d")) arg)))
#+END_SRC
#+BEGIN_EXAMPLE
;; Original keys: # + c a 2*l : SPC c m d a y n c ( " n p m SPC r u n SPC c o 2*m i t " ) C-a C-c C-c

Command: last-kbd-macro
Key: none

Macro:

#			;; self-insert-command
+			;; self-insert-command
c			;; self-insert-command
a			;; self-insert-command
2*l			;; self-insert-command
:			;; self-insert-command
SPC			;; self-insert-command
c			;; self-insert-command
m			;; self-insert-command
d			;; self-insert-command
a			;; self-insert-command
y			;; self-insert-command
n			;; self-insert-command
c			;; self-insert-command
(			;; self-insert-command
"			;; self-insert-command
n			;; self-insert-command
p			;; self-insert-command
m			;; self-insert-command
SPC			;; self-insert-command
r			;; self-insert-command
u			;; self-insert-command
n			;; self-insert-command
SPC			;; self-insert-command
c			;; self-insert-command
o			;; self-insert-command
2*m			;; self-insert-command
i			;; self-insert-command
t			;; self-insert-command
"			;; self-insert-command
)			;; self-insert-command
C-a			;; org-beginning-of-line
C-c C-c			;; org-ctrl-c-ctrl-c

#+END_EXAMPLE

** bages
*** Contnts
#+NAME: bages
#+BEGIN_SRC  python
[![travis build](https://img.shields.io/travis/chowdhuryashraf/friends-aneesha.svg)](https://travis-ci.org/chowdhuryashraf/friends-aneesha)
[![codecov coverage](https://img.shields.io/codecov/c/github/chowdhuryashraf/friends-aneesha.svg)](https://codecov.io/github/chowdhuryashraf/friends-aneesha)
[![version](https://img.shields.io/npm/v/friends-aneesha.svg)](https://www.npmjs.com/package/friends-aneesha)
[![downloads](https://img.shields.io/npm/dm/friends-aneesha.svg)](https://www.npmjs.com/package/friends-aneesha)
[![MIT License](https://img.shields.io/npm/l/friends-aneesha.svg)](https://www.npmjs.com/package/friends-aneesha)
#+END_SRC

*** Add Contents
#+name: bagesbuf
#+BEGIN_SRC elisp :var buf=write_bages() :var mod=module[0] :var end=fread("README.md")
(concat  buf  "\n" mod "\n" "===============" "\n" end)
#+END_SRC

#+RESULTS: bagesbuf

#+NAME: write_bages
#+BEGIN_SRC sh :noweb yes
write_bages= <<beginsh>>
<<bages>>
<<endsh>>
#+END_SRC

#+RESULTS: write_bages
* Send data to PIPE
   CLOCK: [2016-01-13 Wed 05:47]--[2016-01-13 Wed 05:58] =>  0:11
   :PROPERTIES:
   :Effort:   0:10
   :END:
#+NAME: cmdaync
#+BEGIN_SRC sh :var cmd="" :var mod=module[0] :noweb yes
<<check_pipeserver_running>>
echo  $cmd   > $pipe
#+END_SRC

#+RESULTS:
: command npm adduser is sended to /tmp/friends-aneesha

*** check_pipeserver_running
#+NAME: check_pipeserver_running
#+BEGIN_SRC sh
pipe="/tmp/"$mod
[ ! -p $pipe ] && exit 1 || echo "command $DT is sended to $pipe"
#+END_SRC

#+RESULTS: check_pipeserver_running
: command  is sended to /tmp/friends-aneesha
* Linux
#+NAME: useradd
#+BEGIN_SRC sh :var username=""
 useradd --shell /usr/bin/fish -g users --create-home -m -G wheel $username
#+END_SRC
* babel
** Wrap
#+NAME: wrap
#+BEGIN_SRC js :var snippet="" :var process="txt" :var file="" :var post=""  :results raw
  var gen_post = function () {
      if (process === "aync") {
          return ":post " + "cmdaync" +  "(" + "*this*" + ")";
      }
      if (process === "fwrite"){
          return ":post " + "fwrite" + "(" + '"' +  file + '"' + "," + "*this*" + ")";
      }
      return post;
  };
  var code = "#+NAME: " + snippet + "_" + process + "\n";
  code = code + "#+BEGIN_SRC python :session :noweb yes "  + gen_post() + "\n";
  code = code + '"""' + "\n" + '<<' + snippet + '>>' + "\n" + '"""' + "\n";
  code = code + "#+END_SRC";
  console.log(code);
  return 0;
#+END_SRC
* Aync
